# used package
import os 
import xlrd 
from gurobipy import *
import pandas
import pandas as pd
import numpy as np

# import the data form excel file.

os.chdir(r'F:\xxxwhere your file are ')
book = xlrd.open_workbook(os.path.expanduser(r'2019年秋季学期课表.xlsx'))
sh = book.sheet_by_name("sheet0") 


# imported 4 excel files.
data2019=pd.read_excel('2019年秋季学期课表.xlsx',sheet_name='sheet0')
data2018=pd.read_excel('2018年秋季学期课表.xlsx',sheet_name='sheet0')
data2017=pd.read_excel('2017年秋季学期课表.xlsx',sheet_name='sheet0')
data2016=pd.read_excel('2016年秋季学期课表.xlsx',sheet_name='sheet0')

#　Birds view of the imported data by using the jupyter and select by point out the 'column name'.

data1=data2019[['courseID','enrollments','星期节次']]

# We want to restructre the data by course timeslots like 

# Groupby '课程编码' and '已选人数' for course's time into timeslots 
before_merge_data_2016=data2016[['已选人数','课程编码','星期节次']]
after_merge_data_2016=before_merge_data_2016.groupby(['课程编码','已选人数'])['星期节次'].apply(lambda x: ','.join(x.astype(str)) ).reset_index()
before_merge_data_2017=data2017[['已选人数','课程编码','星期节次']]
after_merge_data_2017=before_merge_data_2017.groupby(['课程编码','已选人数'])['星期节次'].apply(lambda x: ','.join(x.astype(str))).reset_index()
before_merge_data_2018=data2018[['已选人数','课程编码','星期节次']]
after_merge_data_2018=before_merge_data_2018.groupby(['课程编码','已选人数'])['星期节次'].apply(lambda x: ','.join(x.astype(str))).reset_index()
before_merge_data_2019=data2019[['已选人数','课程编码','星期节次']]
after_merge_data_2019=before_merge_data_2019.groupby(['课程编码','已选人数'])['星期节次'].apply(lambda x: ','.join(x.astype(str))).reset_index()

#merge the grouby by data
merged_data_all=np.concatenate((after_merge_data_2019,after_merge_data_2018,after_merge_data_2017,after_merge_data_2016))
Dataframe_merged_data_all=pd.DataFrame(merged_data_all,columns=['课程编码','已选人数','星期节次'])
#Dataframe_merged_data_all
unique_timeslots_all_fall=np.unique(Dataframe_merged_data_all['星期节次'
])
unique_timeslots_all_fall

#merged_data_all


number_of_rows=(np.shape(after_merge_data_2019)[0]+np.shape(after_merge_data_2018)[0]+np.shape(after_merge_data_2017)[0]+np.shape(after_merge_data_2016)[0])
number_of_rows


unique_timeslots_all_fall
# Formulate an array for column name construction.
Empty_DataFrame_column=np.concatenate((np.array(['已选人数','课程编码']),unique_timeslots_all_fall),axis=0)
# creat a new data frame for 'y' =已选人数，x_0='课程编码', xi= 星期节次’ 是某个日期
EmptyDataFrame= pd.DataFrame(np.zeros((number_of_rows,np.shape(unique_timeslots_all_fall)[0]+2),dtype = int),columns=Empty_DataFrame_column)



for i in range(0,np.shape(Dataframe_merged_data_all)[0]):
    EmptyDataFrame.loc[i,'已选人数']=Dataframe_merged_data_all.loc[i,'已选人数']
    EmptyDataFrame.loc[i,'课程编码']=Dataframe_merged_data_all.loc[i,'课程编码']
    EmptyDataFrame.loc[i,Dataframe_merged_data_all.loc[i,'星期节次']]=1
# The final avaliable used data.
EmptyDataFrame


# In[74]:


# check if every row are choose one type of timeslots
EmptyDataFrame.sum(axis=1,numeric_only=True)  

# Then we select part of data to Formulate the Traning set and Testing sets 
respons_variable=EmptyDataFrame.loc[:,'已选人数']


Explanatory_Variable=EmptyDataFrame.iloc[:,2:np.shape(EmptyDataFrame)[1]]



# Seperating the traning data and testing data
from sklearn.cross_validation import train_test_split
X_train,X_test,y_train,y_test=train_test_split(Explanatory_Variable,respons_variable,random_state=0)



import numpy as np
from sklearn linear_model
from sklearn.metrics import mean_squared_error, r2_score



# Create linear regression object
regr = linear_model.LinearRegression()


# Train the model using the training sets
regr.fit(X_train, y_train)

# Make predictions using the testing set
y_pred = regr.predict(X_test)

# The coefficients
print('Coefficients: \n', regr.coef_)

# The mean squared error
print('Mean squared error: %.2f'
      % mean_squared_error(y_test, y_pred))
      
# The coefficient of determination: 1 is perfect prediction

print('Coefficient of determination: %.2f'  % r2_score(y_test, y_pred))


from sklearn.metrics import mean_absolute_error

print('Mean _absolute_error: %.2f'
      % mean_absolute_error(y_test, y_pred))

